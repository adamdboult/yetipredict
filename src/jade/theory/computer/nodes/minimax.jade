extends ./subSubTemplate.jade
block subSubTitle
	h1
		b Minimax
block subSubContent
	h3
		b Games
	p Games are different to search. In a search algorithm we are looking for a sequence of actions. In a game we are looking for a reaction function. Unlike in seach, there are other players.
	p We can use iterative deepening search.
	h3
		b Heuristics
	p The search space can be too big to look through all the nodes. 
	p Rather than look for win states, we evaluate a non-terminal state using heuristics.
	h3
		b Zero sum games
	h3
		b Pruning
	p alpha-beta pruning
	p We can use pruning to reduce the number of nodes we search.
	p Alpha-beta pruning is a method for pruning. For each node we maintain two values:
	ul
		li Alpha. The lower bound on the maximum value of the children.
		li Beta. The upper bound on the minimum value of the children.
	p Consider a player node with a score of \(2\), which has a neighbour. This neighbour has a 
	p We can know for sure we don't need to explore some paths. for example consider the mini player. there is a node we know the minimax value of a node is 2, and there is a neighbour with one child with a value of 3, then 
	
	p like DFS, but keep track of:
	p + alpha (largest value for max across viewed children)
	p   * initialise to  +/-\infty
	p   * initialise to \infty

	p propagate \alpha and \beta down during search. prune where \(\alpha \ge \beta \)
	p update \alpha and \beta by propagating upwards.
	p only update alpha on max nodes, beta on min node

	p ordering matters. if it's worst, then no pruning. want an ordering with lots of pruning
	p can:
	p + do shallow nodes
	p + order node so best are done first
	p + domain knowledge heuristics (chess: capture, threaten, forward, backwards)
	p in practice can get time down to O(b^\frac{m}{2})

	p use heuristic. deep blue uses 6000
	h3
		b Stochastic games
	p can use expectminimax
	p for max node, return highest expectminimax of children
	p for min node ---
	p for chance node, average of children weightted
