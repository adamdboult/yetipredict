extends ./subSubTemplate.jade
block subSubTitle
	h1
		b MapReduce
block subSubContent
	h3
		b Introduction
	p Framework for parallising problems.

	p Say we have text and we want to do a word count. We can split the text into multiple subsections, do a word count on each and add these up.

	p MapReduce can do this.

	h3
		b 1: Splitting

	p The main server splits the database into subsections.

	p For example, the text document could be divided into \(M\) chunks, to be split across different servers.

	p The master server can then pass data to be Mapped when they have capacity. Each server could run Map on a large number of documents.

	p Each document here is stored as a key value pair. The value here would be the text, and the key would identify the document.

	p \(\{2: "Apple Apple Carrot"\}\)

	h3
		b 2: Mapping

	p Rather than simply doing a word count on the subsections, we do a more complex, but more efficient approach.

	p We map the key value pair to a list of key value pairs. In our example we would map this to identifiers for each word.

	p The output here would be

	p \([\{"Apple": 1\}, \{"Apple": 1\}, \{"Carrot": 1\}]\)
	p The Map function will differ depending on the use case.
	h3
		b 3: Shuffling

	p We now want to combine the key value pairs. There are \(R\) keys from the intermediate output of the Map program.

	p For each of the \(R\) keys, the master server assigns a server to reduce the key.

	p The master server then notifies the Reduce worker of the location of each relevant document output from the Map process. The Reduce server then copies the key value pair.
	p The Reduce worker now has an input of key value pairs. In our example one would have received:

	p \(\{"Apple": 1\}\)

	p \(\{"Apple": 1\}\)
	p It would also have received other instances from other servers.

	p The Reduce worker can then combine these to form the following:

	p \(\{"Apple": [1,1]\}\)
	h3
		b 4: Reduce

	p Once all the data has been mapped, the data can be reduced.

	p In our example this involves creating:

	p \(\{"Apple": 2\}\)
	p The Reduce function will differ depending on the use case.
	h3
		b 5: Output

	p The outputs of each reduce can then be shared back to the main server.

	p We now have our word count.
